{{ if ne .Values.deploy.tag "" -}}
{{ $_ := set . "image" (print .Values.deploy.repository ":" .Values.deploy.tag) -}}
{{ else -}}
{{ $_ := set . "image" (print .Values.deploy.repository ":" .Chart.Version "-" .Values.pgpool.version) -}}
{{ end -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}"
  labels:
    app: "{{ .Release.Name }}"
spec:
  replicas: {{ .Values.deploy.replicaCount }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}"
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}"
      {{- with .Values.deploy.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.deploy.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deploy.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      containers:
      - name: pgpool
        image: "{{ .image }}"
        imagePullPolicy: Always
        ports:
          - name: postgres-port
            containerPort: 5432
        {{- with .Values.deploy.resources.pgpool }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command:
        - "/usr/bin/pgpool.sh"

        {{- if .Values.deploy.startupProbe.pgpool.enabled }}
        startupProbe:
          tcpSocket:
            port: postgres-port
          initialDelaySeconds: {{ .Values.deploy.startupProbe.pgpool.initialDelaySeconds }}
          periodSeconds: {{ .Values.deploy.startupProbe.pgpool.periodSeconds }}
          timeoutSeconds: {{ .Values.deploy.startupProbe.pgpool.timeoutSeconds }}
          successThreshold: {{ .Values.deploy.startupProbe.pgpool.successThreshold }}
          failureThreshold: {{ .Values.deploy.startupProbe.pgpool.failureThreshold }}
        {{- end }}
        {{- if .Values.deploy.readinessProbe.pgpool.enabled }}
        readinessProbe:
          tcpSocket:
            port: postgres-port
          initialDelaySeconds: {{ .Values.deploy.readinessProbe.pgpool.initialDelaySeconds }}
          periodSeconds: {{ .Values.deploy.readinessProbe.pgpool.periodSeconds }}
          timeoutSeconds: {{ .Values.deploy.readinessProbe.pgpool.timeoutSeconds }}
          successThreshold: {{ .Values.deploy.readinessProbe.pgpool.successThreshold }}
          failureThreshold: {{ .Values.deploy.readinessProbe.pgpool.failureThreshold }}
        {{- end }}
        {{- if .Values.deploy.livenessProbe.pgpool.enabled }}
        livenessProbe:
          tcpSocket:
            port: postgres-port
          initialDelaySeconds: {{ .Values.deploy.livenessProbe.pgpool.initialDelaySeconds }}
          periodSeconds: {{ .Values.deploy.livenessProbe.pgpool.periodSeconds }}
          timeoutSeconds: {{ .Values.deploy.livenessProbe.pgpool.timeoutSeconds }}
          successThreshold: {{ .Values.deploy.livenessProbe.pgpool.successThreshold }}
          failureThreshold: {{ .Values.deploy.livenessProbe.pgpool.failureThreshold }}
        {{- end }}
        volumeMounts:
        - name: etcdir
          mountPath: /etc/pgpool
        env:
        - name: COREDUMP_SIZE_LIMIT
          value: "{{ .Values.pgpool.coredumpSizeLimit }}"

      - name: discovery
        image: "{{ .image }}"
        imagePullPolicy: Always
        {{- with .Values.deploy.resources.discovery }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command:
          - /usr/bin/discovery.sh
        env:
        - name: PRIMARY_INSTANCE_PREFIX
          value: {{ required "You must set .discovery.primaryInstancePrefix!" .Values.discovery.primaryInstancePrefix | quote }}
        - name: STAY_IN_REGION
          value: {{ .Values.discovery.stayInRegion | quote }}
        - name: PRUNE_THRESHOLD
          value: {{ .Values.discovery.pruneThreshold | quote }}
        - name: PROCESS_MANAGEMENT_MODE
          value: {{ .Values.pgpool.processManagementMode | quote }}
        - name: PROCESS_MANAGEMENT_STRATEGY
          value: {{ .Values.pgpool.processManagementStrategy | quote }}
        - name: MIN_SPARE_CHILDREN
          value: {{ .Values.pgpool.minSpareChildren | quote }}
        - name: MAX_SPARE_CHILDREN
          value: {{ .Values.pgpool.maxSpareChildren | quote }}
        - name: RESERVED_CONNECTIONS
          value: "{{ .Values.pgpool.reservedConnections }}"
        - name: NUM_INIT_CHILDREN
          value: "{{ .Values.pgpool.numInitChildren }}"
        - name: MAX_POOL
          value: "{{ .Values.pgpool.maxPool }}"
        - name: CHILD_LIFE_TIME
          value: "{{ .Values.pgpool.childLifeTime }}"
        - name: CHILD_MAX_CONNECTIONS
          value: "{{ .Values.pgpool.childMaxConnections }}"
        - name: CONNECTION_LIFE_TIME
          value: "{{ .Values.pgpool.connectionLifeTime }}"
        - name: CLIENT_IDLE_LIMIT
          value: "{{ .Values.pgpool.clientIdleLimit }}"
        - name: IGNORE_LEADING_WHITE_SPACE
          value: "{{ .Values.pgpool.ignoreLeadingWhiteSpace }}"
        - name: PRIMARY_ROUTING_QUERY_PATTERN_LIST
          value: "{{ .Values.pgpool.primaryRoutingQueryPatternList }}"
        - name: ALLOW_SQL_COMMENTS
          value: "{{ .Values.pgpool.allowSqlComments }}"
        - name: DISABLE_LOAD_BALANCE_ON_WRITE
          value: "{{ .Values.pgpool.disableLoadBalanceOnWrite }}"
        - name: STATEMENT_LEVEL_LOAD_BALANCE
          value: "{{ .Values.pgpool.statementLevelLoadBalance }}"
        - name: PRIMARY_WEIGHT
          value: "{{ .Values.pgpool.primaryWeight }}"
        - name: REPLICAS_WEIGHT
          value: "{{ .Values.pgpool.replicasWeight }}"
        - name: LOG_MIN_MESSAGES
          value: "{{ .Values.pgpool.logMinMessages }}"
        - name: LOG_ERROR_VERBOSITY
          value: "{{ .Values.pgpool.logErrorVerbosity }}"
        - name: SR_CHECK_USERNAME
          value: {{ required "You must set pgpool.srCheckUsername!" .Values.pgpool.srCheckUsername | quote }}
        - name: SR_CHECK_PASSWORD
          value: "{{ .Values.pgpool.srCheckPassword }}"
        - name: SR_CHECK_DATABASE
          value: "{{ .Values.pgpool.srCheckDatabase }}"
        - name: HEALTH_CHECK_USERNAME
          value: {{ required "You must set pgpool.healthCheckUsername!" .Values.pgpool.healthCheckUsername | quote }}
        - name: HEALTH_CHECK_PASSWORD
          value: "{{ .Values.pgpool.healthCheckPassword }}"
        - name: HEALTH_CHECK_DATABASE
          value: "{{ .Values.pgpool.healthCheckDatabase }}"
        - name: PCP_PASSWORD
          value: "{{ .Values.pcp.password }}"
        volumeMounts:
        - name: etcdir
          mountPath: /etc/pgpool

      - name: exporter
        ports:
          - name: metrics
            containerPort: 9090
        image: "{{ .image }}"
        imagePullPolicy: Always
        {{- with .Values.deploy.resources.exporter }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- if .Values.deploy.startupProbe.exporter.enabled }}
        startupProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: {{ .Values.deploy.startupProbe.exporter.initialDelaySeconds }}
          periodSeconds: {{ .Values.deploy.startupProbe.exporter.periodSeconds }}
          timeoutSeconds: {{ .Values.deploy.startupProbe.exporter.timeoutSeconds }}
          successThreshold: {{ .Values.deploy.startupProbe.exporter.successThreshold }}
          failureThreshold: {{ .Values.deploy.startupProbe.exporter.failureThreshold }}
        {{- end }}
        {{- if .Values.deploy.readinessProbe.exporter.enabled }}
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: {{ .Values.deploy.readinessProbe.exporter.initialDelaySeconds }}
          periodSeconds: {{ .Values.deploy.readinessProbe.exporter.periodSeconds }}
          timeoutSeconds: {{ .Values.deploy.readinessProbe.exporter.timeoutSeconds }}
          successThreshold: {{ .Values.deploy.readinessProbe.exporter.successThreshold }}
          failureThreshold: {{ .Values.deploy.readinessProbe.exporter.failureThreshold }}
        {{- end }}
        {{- if .Values.deploy.livenessProbe.exporter.enabled }}
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: {{ .Values.deploy.livenessProbe.exporter.initialDelaySeconds }}
          periodSeconds: {{ .Values.deploy.livenessProbe.exporter.periodSeconds }}
          timeoutSeconds: {{ .Values.deploy.livenessProbe.exporter.timeoutSeconds }}
          successThreshold: {{ .Values.deploy.livenessProbe.exporter.successThreshold }}
          failureThreshold: {{ .Values.deploy.livenessProbe.exporter.failureThreshold }}
        {{- end }}
        command:
        - "/usr/bin/exporter.sh"
        env:
        - name: POSTGRES_USERNAME
          value: {{ required "You must set .exporter.postgresUsername!" .Values.exporter.postgresUsername | quote }}
        - name: POSTGRES_PASSWORD
          value: {{ required "You must set .exporter.postgresPassword!" .Values.exporter.postgresPassword | quote }}
        - name: POSTGRES_DATABASE
          value: "{{ .Values.exporter.postgresDatabase }}"
        - name: PGPOOL_SERVICE
          value: localhost
        - name: PGPOOL_SERVICE_PORT
          value: "5432"
        - name: EXIT_ON_ERROR
          value: {{ .Values.exporter.exitOnError | default "false" | quote }}

      {{- if eq .Values.telegraf.enabled "true" }}
      - name: telegraf
        image: "{{ .image }}"
        imagePullPolicy: Always
        {{- with .Values.deploy.resources.telegraf }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command:
          - /usr/bin/telegraf.sh
        env:
        - name: EXIT_ON_ERROR
          value: {{ .Values.telegraf.exitOnError | default "false" | quote }}
        volumeMounts:
        - name: telegraf-config
          mountPath: /etc/telegraf
      {{- end }}

      volumes:
      - name: etcdir
        emptyDir: {}
      - name: telegraf-config
        configMap:
          name: "{{ .Release.Name }}-telegraf"
